{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component, Fragment } from 'react';\nimport Head from 'next/head';\nimport openSocket from 'socket.io-client';\nimport QRCode from 'qrcode.react';\nimport './App.css';\n\nclass App extends Component {\n  static getInitialProps({\n    query\n  }) {\n    return {\n      query\n    };\n  }\n\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"__socketListeners\", () => {\n      this.socket.on('news', result => {\n        console.log(result);\n      });\n    });\n\n    this.state = {\n      hasConnectionEstablished: false,\n      host: ''\n    };\n    this.socket = {};\n  }\n\n  componentDidMount() {\n    const {\n      ipAddress,\n      port\n    } = this.props.query;\n    const host = `${ipAddress}:${port}`;\n\n    try {\n      this.socket = openSocket(host);\n      this.setState({\n        hasConnectionEstablished: true,\n        host\n      }, () => {\n        this.__socketListeners();\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  /**\n   * TODO attach more listeners here\n   * @private\n   */\n\n\n  /**\n   * TODO clean this up\n   * @returns {*}\n   */\n  render() {\n    const {\n      host,\n      hasConnectionEstablished\n    } = this.state;\n    return __jsx(Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Smart Kan\"), __jsx(\"meta\", {\n      name: \"viewport\",\n      content: \"initial-scale=1.0, width=device-width\",\n      key: \"viewport\"\n    }), __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\",\n      integrity: \"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\",\n      crossOrigin: \"anonymous\"\n    })), __jsx(\"div\", {\n      className: \"App\"\n    }, __jsx(\"header\", {\n      className: \"App-header\"\n    }, __jsx(\"h1\", null, \"Smart Kan\"), hasConnectionEstablished ? __jsx(QRCode, {\n      value: host.toString(),\n      size: 200\n    }) : null, hasConnectionEstablished ? __jsx(\"p\", null, \"Scan to connect to this display\") : __jsx(\"div\", null, \"Waiting on Connection to be established\"))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/xavierthomas/webProjects/kanbanmirror/pages/index.js"],"names":["React","Component","Fragment","Head","openSocket","QRCode","App","getInitialProps","query","constructor","props","socket","on","result","console","log","state","hasConnectionEstablished","host","componentDidMount","ipAddress","port","setState","__socketListeners","e","error","render","toString"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAAyBC,QAAzB,QAAwC,OAAxC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAO,WAAP;;AAGA,MAAOC,GAAP,SAAmBL,SAAnB,CAA6B;AAC3B,SAAOM,eAAP,CAAuB;AAACC,IAAAA;AAAD,GAAvB,EAA+B;AAC7B,WAAO;AAACA,MAAAA;AAAD,KAAP;AACD;;AACDC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;;AADgB,+CA6BE,MAAK;AACvB,WAAKC,MAAL,CAAYC,EAAZ,CAAe,MAAf,EAAuBC,MAAM,IAAG;AAC9BC,QAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACD,OAFD;AAGD,KAjCiB;;AAEhB,SAAKG,KAAL,GAAY;AACVC,MAAAA,wBAAwB,EAAE,KADhB;AAEVC,MAAAA,IAAI,EAAE;AAFI,KAAZ;AAIA,SAAKP,MAAL,GAAc,EAAd;AACD;;AAEDQ,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAACC,MAAAA,SAAD;AAAYC,MAAAA;AAAZ,QAAoB,KAAKX,KAAL,CAAWF,KAArC;AACA,UAAMU,IAAI,GAAI,GAAEE,SAAU,IAAGC,IAAK,EAAlC;;AACA,QAAG;AACD,WAAKV,MAAL,GAAcP,UAAU,CAACc,IAAD,CAAxB;AACA,WAAKI,QAAL,CAAc;AACZL,QAAAA,wBAAwB,EAAE,IADd;AAEZC,QAAAA;AAFY,OAAd,EAGG,MAAI;AACL,aAAKK,iBAAL;AACD,OALD;AAMD,KARD,CAQC,OAAMC,CAAN,EAAQ;AACPV,MAAAA,OAAO,CAACW,KAAR,CAAcD,CAAd;AACD;AACF;AAED;;;;;;AAUA;;;;AAIAE,EAAAA,MAAM,GAAE;AAEN,UAAM;AAACR,MAAAA,IAAD;AAAMD,MAAAA;AAAN,QAAkC,KAAKD,KAA7C;AACA,WACI,MAAC,QAAD,QACE,MAAC,IAAD,QACE,iCADF,EAEE;AACI,MAAA,IAAI,EAAC,UADT;AAEI,MAAA,OAAO,EAAC,uCAFZ;AAGI,MAAA,GAAG,EAAC;AAHR,MAFF,EAOE;AACI,MAAA,GAAG,EAAC,YADR;AAEI,MAAA,IAAI,EAAC,uEAFT;AAGI,MAAA,SAAS,EAAC,yEAHd;AAII,MAAA,WAAW,EAAC;AAJhB,MAPF,CADF,EAeA;AAAK,MAAA,SAAS,EAAC;AAAf,OACE;AAAQ,MAAA,SAAS,EAAC;AAAlB,OACE,8BADF,EAKIC,wBAAwB,GAAG,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAEC,IAAI,CAACS,QAAL,EAAf;AAAgC,MAAA,IAAI,EAAE;AAAtC,MAAH,GAAkD,IAL9E,EAQIV,wBAAwB,GAAG,mDAAH,GAGpB,6DAXR,CADF,CAfA,CADJ;AAqCD;;AAnF0B;;AAsF7B,eAAeX,GAAf","sourcesContent":["import React, {Component,Fragment} from 'react';\nimport Head from 'next/head'\n\nimport openSocket from 'socket.io-client';\nimport QRCode from 'qrcode.react'\nimport './App.css';\n\n\nclass  App extends Component {\n  static getInitialProps({query}){\n    return {query}\n  }\n  constructor(props){\n    super(props)\n    this.state ={\n      hasConnectionEstablished: false,\n      host: '',\n    }\n    this.socket = {}\n  }\n\n  componentDidMount() {\n    const {ipAddress, port} = this.props.query\n    const host = `${ipAddress}:${port}`\n    try{\n      this.socket = openSocket(host)\n      this.setState({\n        hasConnectionEstablished: true,\n        host\n      }, ()=>{\n        this.__socketListeners()\n      })\n    }catch(e){\n      console.error(e)\n    }\n  }\n\n  /**\n   * TODO attach more listeners here\n   * @private\n   */\n  __socketListeners = () =>{\n    this.socket.on('news', result =>{\n      console.log(result)\n    })\n  }\n\n  /**\n   * TODO clean this up\n   * @returns {*}\n   */\n  render(){\n\n    const {host,hasConnectionEstablished} = this.state\n    return (\n        <Fragment>\n          <Head>\n            <title>Smart Kan</title>\n            <meta\n                name=\"viewport\"\n                content=\"initial-scale=1.0, width=device-width\"\n                key=\"viewport\"\n            />\n            <link\n                rel=\"stylesheet\"\n                href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n                integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n                crossOrigin=\"anonymous\"\n            />\n          </Head>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1>\n              Smart Kan\n            </h1>\n            {\n              hasConnectionEstablished?  <QRCode value={host.toString()} size={200} />: null\n            }\n            {\n              hasConnectionEstablished? (<p>\n                Scan to connect to this display\n              </p>) : (\n                  <div>\n                    Waiting on Connection to be established\n                  </div>\n              )\n            }\n          </header>\n        </div>\n        </Fragment>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}