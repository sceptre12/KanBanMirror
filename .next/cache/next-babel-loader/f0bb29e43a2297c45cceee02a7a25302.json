{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component, Fragment } from 'react';\nimport Head from 'next/head';\nimport openSocket from 'socket.io-client';\nimport QRCode from 'qrcode.react';\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, null, [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(_ref) {\n      var query = _ref.query;\n      return {\n        query: query\n      };\n    }\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"__socketListeners\", function () {\n      _this.socket.on('news', function (result) {\n        console.log(result);\n      });\n    });\n\n    _this.state = {\n      hasConnectionEstablished: false,\n      host: ''\n    };\n    _this.socket = {};\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _this$props$query = this.props.query,\n          ipAddress = _this$props$query.ipAddress,\n          port = _this$props$query.port;\n      var host = \"\".concat(ipAddress, \":\").concat(port);\n\n      try {\n        this.socket = openSocket(host);\n        this.setState({\n          hasConnectionEstablished: true,\n          host: host\n        }, function () {\n          _this2.__socketListeners();\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    }\n    /**\n     * TODO attach more listeners here\n     * @private\n     */\n\n  }, {\n    key: \"render\",\n\n    /**\n     * TODO clean this up\n     * @returns {*}\n     */\n    value: function render() {\n      var _this$state = this.state,\n          host = _this$state.host,\n          hasConnectionEstablished = _this$state.hasConnectionEstablished;\n      return __jsx(Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Smart Kan\"), __jsx(\"meta\", {\n        name: \"viewport\",\n        content: \"initial-scale=1.0, width=device-width\",\n        key: \"viewport\"\n      }), __jsx(\"link\", {\n        rel: \"stylesheet\",\n        href: \"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\",\n        integrity: \"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\",\n        crossOrigin: \"anonymous\"\n      })), __jsx(\"div\", {\n        className: \"App\"\n      }, __jsx(\"header\", {\n        className: \"App-header\"\n      }, __jsx(\"h1\", null, \"Smart Kan\"), hasConnectionEstablished ? __jsx(QRCode, {\n        value: host.toString(),\n        size: 200\n      }) : null, hasConnectionEstablished ? __jsx(\"p\", null, \"Scan to connect to this display\") : __jsx(\"div\", null, \"Waiting on Connection to be established\"))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/xavierthomas/webProjects/kanbanmirror/pages/index.js"],"names":["React","Component","Fragment","Head","openSocket","QRCode","App","query","props","socket","on","result","console","log","state","hasConnectionEstablished","host","ipAddress","port","setState","__socketListeners","e","error","toString"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAAyBC,QAAzB,QAAwC,OAAxC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAO,WAAP;;IAGOC,G;;;;;;;0CAC0B;AAAA,UAAPC,KAAO,QAAPA,KAAO;AAC7B,aAAO;AAACA,QAAAA,KAAK,EAALA;AAAD,OAAP;AACD;;;AACD,eAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAChB,6EAAMA,KAAN;;AADgB,wEA6BE,YAAK;AACvB,YAAKC,MAAL,CAAYC,EAAZ,CAAe,MAAf,EAAuB,UAAAC,MAAM,EAAG;AAC9BC,QAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACD,OAFD;AAGD,KAjCiB;;AAEhB,UAAKG,KAAL,GAAY;AACVC,MAAAA,wBAAwB,EAAE,KADhB;AAEVC,MAAAA,IAAI,EAAE;AAFI,KAAZ;AAIA,UAAKP,MAAL,GAAc,EAAd;AANgB;AAOjB;;;;wCAEmB;AAAA;;AAAA,8BACQ,KAAKD,KAAL,CAAWD,KADnB;AAAA,UACXU,SADW,qBACXA,SADW;AAAA,UACAC,IADA,qBACAA,IADA;AAElB,UAAMF,IAAI,aAAMC,SAAN,cAAmBC,IAAnB,CAAV;;AACA,UAAG;AACD,aAAKT,MAAL,GAAcL,UAAU,CAACY,IAAD,CAAxB;AACA,aAAKG,QAAL,CAAc;AACZJ,UAAAA,wBAAwB,EAAE,IADd;AAEZC,UAAAA,IAAI,EAAJA;AAFY,SAAd,EAGG,YAAI;AACL,UAAA,MAAI,CAACI,iBAAL;AACD,SALD;AAMD,OARD,CAQC,OAAMC,CAAN,EAAQ;AACPT,QAAAA,OAAO,CAACU,KAAR,CAAcD,CAAd;AACD;AACF;AAED;;;;;;;;AAUA;;;;6BAIQ;AAAA,wBAEkC,KAAKP,KAFvC;AAAA,UAECE,IAFD,eAECA,IAFD;AAAA,UAEMD,wBAFN,eAEMA,wBAFN;AAGN,aACI,MAAC,QAAD,QACE,MAAC,IAAD,QACE,iCADF,EAEE;AACI,QAAA,IAAI,EAAC,UADT;AAEI,QAAA,OAAO,EAAC,uCAFZ;AAGI,QAAA,GAAG,EAAC;AAHR,QAFF,EAOE;AACI,QAAA,GAAG,EAAC,YADR;AAEI,QAAA,IAAI,EAAC,uEAFT;AAGI,QAAA,SAAS,EAAC,yEAHd;AAII,QAAA,WAAW,EAAC;AAJhB,QAPF,CADF,EAeA;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAQ,QAAA,SAAS,EAAC;AAAlB,SACE,8BADF,EAKIA,wBAAwB,GAAG,MAAC,MAAD;AAAQ,QAAA,KAAK,EAAEC,IAAI,CAACO,QAAL,EAAf;AAAgC,QAAA,IAAI,EAAE;AAAtC,QAAH,GAAkD,IAL9E,EAQIR,wBAAwB,GAAG,mDAAH,GAGpB,6DAXR,CADF,CAfA,CADJ;AAqCD;;;;EAnFgBd,S;;AAsFnB,eAAeK,GAAf","sourcesContent":["import React, {Component,Fragment} from 'react';\nimport Head from 'next/head'\n\nimport openSocket from 'socket.io-client';\nimport QRCode from 'qrcode.react'\nimport './App.css';\n\n\nclass  App extends Component {\n  static getInitialProps({query}){\n    return {query}\n  }\n  constructor(props){\n    super(props)\n    this.state ={\n      hasConnectionEstablished: false,\n      host: '',\n    }\n    this.socket = {}\n  }\n\n  componentDidMount() {\n    const {ipAddress, port} = this.props.query\n    const host = `${ipAddress}:${port}`\n    try{\n      this.socket = openSocket(host)\n      this.setState({\n        hasConnectionEstablished: true,\n        host\n      }, ()=>{\n        this.__socketListeners()\n      })\n    }catch(e){\n      console.error(e)\n    }\n  }\n\n  /**\n   * TODO attach more listeners here\n   * @private\n   */\n  __socketListeners = () =>{\n    this.socket.on('news', result =>{\n      console.log(result)\n    })\n  }\n\n  /**\n   * TODO clean this up\n   * @returns {*}\n   */\n  render(){\n\n    const {host,hasConnectionEstablished} = this.state\n    return (\n        <Fragment>\n          <Head>\n            <title>Smart Kan</title>\n            <meta\n                name=\"viewport\"\n                content=\"initial-scale=1.0, width=device-width\"\n                key=\"viewport\"\n            />\n            <link\n                rel=\"stylesheet\"\n                href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n                integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n                crossOrigin=\"anonymous\"\n            />\n          </Head>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1>\n              Smart Kan\n            </h1>\n            {\n              hasConnectionEstablished?  <QRCode value={host.toString()} size={200} />: null\n            }\n            {\n              hasConnectionEstablished? (<p>\n                Scan to connect to this display\n              </p>) : (\n                  <div>\n                    Waiting on Connection to be established\n                  </div>\n              )\n            }\n          </header>\n        </div>\n        </Fragment>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}